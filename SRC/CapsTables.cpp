#define WIN32_LEAN_AND_MEAN
#include <windows.h>
//#include <stdio.h>
//#include <alloc.h>
#include "../minilzo/minilzo.h"
#include "CapsTables.h"
#ifdef __BORLANDC__
#pragma warn -pia /* Borland-C: possibly incorrect assignment */
#endif

#if defined(__POCC__) /* Pelles C */
#define itoa _itoa
#define memicmp _memicmp
#pragma warn(disable:2216 2209) /* Return value from function is never used; Unreachable code removed */
#endif

#if 0
#ifndef NELEM
#define NELEM(xyzzy) (sizeof(xyzzy)/sizeof(xyzzy[0]))
#endif

wchar_t arrayW[1];
wchar_t funcW(wchar_t wc) {
  return wc;
}
wchar_t func(int which) {
  wchar_t rv=which?funcW(L'A'):arrayW[0]; // warning #2215: Conversion from 'int' to 'unsigned short int'; possible loss of data.
  return rv;
}

USHORT usa,usb;
BOOL flagit(short int *flags,USHORT usx) {
  *flags |= 0x8; //warning #2215: Conversion from 'int' to 'short int'; possible loss of data.
  BOOL kscapital=(GetAsyncKeyState(VK_CAPITAL)&0x8000)?TRUE:FALSE; // warning #2215: Conversion from 'int' to 'short int'; possible loss of data.
  usa=usb=usx+1; // warning #2215: Conversion from 'int' to 'unsigned short int'; possible loss of data.
  return kscapital;
}

char forit(void) {
  WORD i;
  for(i=0; i<NELEM(arrayW); i++) // warning #2215: Conversion from 'int' to 'unsigned short int'; possible loss of data.
    funcW(arrayW[i]); // warning #2215: Conversion from 'int' to 'unsigned short int'; possible loss of data.
  return 'a';
}

void xxit(void) {
  char c=forit(); //warning #2215: Conversion from 'int' to 'char'; possible loss of data.
}

unsigned char flagchars(unsigned char *t) {
  unsigned char *u=NULL;
  unsigned char bits6=t-u; // warning #2215: Conversion from 'long int' to 'unsigned char'; possible loss of data.
  *t |= 0x3F; // warning #2215: Conversion from 'int' to 'unsigned char'; possible loss of data.
  *u |= *t; //warning #2215: Conversion from 'int' to 'unsigned char'; possible loss of data.
  return bits6;
}

// Why can't I do bitwise math on anything but 32 bit values?
// Why can't I use anything but a 32 bit value as a counter?
// Why are char and short int not handled by the registers of the proper width?
// Why is the result type of a ?: not the agregated result type of each item?
// Why is the type of a pointer difference long int?
// Why is the result of an assignment promoted to 32 bits?
// Why are implicit signed casts occuring where only unsigned variables are used?
#endif

/* Windows 98 provides IsCharUpperW, IsCharLowerW, CharUpperW, CharLowerW, but they are non functional */
/* We will provide functional replacements. These tables provide the needed conversions. */
/* They are compressed to keep the executable small and are only decompressed for Win9x when requested. */

/* GlobalAlloc() seems like a better idea for such large buffers */

HGLOBAL hISCHARUPPERCTW=NULL;
unsigned *ISCHARUPPERCTW=NULL; /* Uncompressed bitpacked table */
unsigned IsCharUpperCTW_compressed[]={ /* Compressed bitpacked table from pfInsertUnicodeCapsTables */
0x00002000,/* Original length in bytes */
0x000000e2,/* Compressed length in bytes */
0x00000009,0x00000000,0xfffffe00,0xec007c07,0xffff0100,0x016d7f7f,0xaa00a355,0x018054aa,0xced62b0d,0xd2d5b1db,0xadb011ae,0x55554aaa,0x540293d6,0x05680555,0x000c0420,0xfed74003,
0x680ffbff,0x541c0405,0x00005555,0x7e0080ff,0x72000001,0x74500109,0x55550100,0x007e088b,0x03a40115,0x98ff1355,0x2001b811,0x00143f00,0x203f3269,0x058c3f00,0x05782720,0x0d2c6474,
0x689c1500,0x010202cc,0x3f00ff00,0x0074004c,0xff00aa02,0x018f0000,0x451f00ff,0x004d0f00,0x021c3e1f,0x27388404,0x0b3d503e,0x2000983e,0x00000000,0x00000000,0x00000000,0x00000000,
0x00000000,0x00000000,0x97000000,0x2dfe007d,0x00097f6c,0x00000000,0x00000000,0x11000000,0x00000000
};

HGLOBAL hISCHARLOWERCTW=NULL;
unsigned *ISCHARLOWERCTW=NULL;
unsigned IsCharLowerCTW_compressed[]={ /* Compressed bitpacked table from pfInsertUnicodeCapsTables */
0x00002000,/* Original length in bytes */
0x000000e1,/* Compressed length in bytes */
0x00000002,0x00c00000,0xfffffe01,0x04018b07,0x005c0420,0xffff8003,0xa3aaff7f,0xab555500,0xd40d0180,0x4e243129,0xe6512d2a,0xb5555b60,0x902daaaa,0xaaa80402,0x0000000a,0x000128ff,
0x3707543f,0x01010008,0x48f00000,0xe37f0305,0x0faaaaa8,0x015e04d4,0x0d8effff,0x0a8ba002,0x7e1114aa,0xc0022a00,0x5e009804,0x84ffff13,0x00002001,0x740010eb,0x000e2c64,0x3c290fea,
0xff020300,0xff003f00,0x00b60044,0x6da43fff,0xdc50df07,0xff00cf10,0x2d10dc00,0x2d800d25,0x0005003c,0x0008c400,0x2b108000,0x8c2f0e1c,0x00002000,0x00000000,0x00000000,0x00000000,
0x00000000,0x00000000,0x00000000,0x00431500,0x20f8007f,0xfe6c7564,0x2d7f6c26,0x00110234,0x00000000
};

HGLOBAL hISCHARALPHANUMERICCTW=NULL;
unsigned *ISCHARALPHANUMERICCTW=NULL;
unsigned IsCharAlphaNumericCTW_compressed[]={ /* Compressed bitpacked table from pfInsertUnicodeCapsTables */
0x00002000,/* Original length in bytes */
0x000002b5,/* Compressed length in bytes */
0x00000009,0xff000000,0xfffffe03,0x00006d07,0x04040060,0xffff062c,0x00acff7f,0x083d0058,0xfffc0300,0x0000000f,0x01009029,0x03f9ff3f,0x401f0246,0x00ad0970,0x0300b820,0xffd74004,
0x0568fbff,0xfcff7f03,0x2a0fffff,0x027700d4,0x9bf003ff,0x199fff00,0x7b3f007d,0x00000008,0x7fff1347,0xff007502,0x0b5408bc,0x0707035e,0x025c0194,0x3f01174c,0x4c03ff00,0x00082702,
0xfe1fef03,0x9e1fff21,0x27ff1f12,0x03b900d8,0x20069c01,0xee001103,0x090006a0,0x011fffe3,0x00ffcfff,0xf99fee00,0xc5fdffff,0x80199fc3,0x03ffcfb0,0x7c87e400,0xc36d0a01,0x5e001987,
0x001fffc0,0x5cfbafee,0xe3ed0403,0x00011bbf,0x00bc27c1,0xe3cd0500,0xb0c0198f,0x0000ffc3,0xd63dc7ec,0xc3bfc718,0x00801dc7,0x08037c80,0xfffffddf,0xdfc3effd,0x9c00601d,0x003d2803,
0x003c2840,0xcfc3ff02,0x03bf801d,0x44fc7fff,0x7f2f0128,0x09555f80,0x4823840c,0xff070114,0x258cff7f,0xf0259609,0xffecaefe,0xff201f3b,0x641b7c33,0xff03651d,0x3c662450,0x01850f03,
0x6c036c1f,0x04074c00,0x47f6fbff,0x7403ff01,0x86026404,0x853fff26,0x00947f33,0xff01046c,0xde83ffff,0xe007ff00,0xffff0101,0x01cc7f03,0x7f3d7f01,0x9501683d,0x01517f00,0x4b03447f,
0x3d7fff00,0x53ff0075,0xfe000700,0x4d291488,0x17fc1f01,0x21200768,0x7f9f000e,0x7828097c,0xb043b802,0x2700d41a,0x74010191,0xb502705e,0x03a0f746,0x14b813ac,0x80200370,0x16b8000c,
0x0f00152b,0x46003429,0x7c3f3f62,0x3f3f0101,0x005caaff,0xff08018c,0xdc5fdfff,0xff0fcf1f,0x1c27dc1f,0x801dc108,0x182700dc,0xfc840400,0xbd503e2f,0x5c2284fb,0x277d8407,0x00200070,
0xc00021a3,0x0003ab76,0xb10ca431,0x3e71e03b,0x6087701f,0x7f004d01,0x03b0839c,0x00142220,0x00200a44,0x09150000,0xe4273f00,0x0000200d,0x0cf01500,0x00000020,0xe6000000,0xf4280cc8,
0x372c2328,0x1c3c6d20,0x2742442e,0xb5202ba4,0x6d200020,0x002005f0,0xc9000000,0xb4220234,0x34b5206a,0x00002019,0x03543400,0x24440420,0x2d2d402a,0x7f060e08,0xffa0f800,0xdb5f7ffd,
0x2201202b,0x2bf86d39,0x313d0044,0xa5283f00,0x05a8fc2e,0x392e0c9c,0x03acd76e,0x22001428,0x6c2c7bfc,0x7ce4247f,0xfcfc7f06,0x00001cfc,0x00110000,0x00000000
};

HGLOBAL hCHARUPPERCTW=NULL;
wchar_t *CHARUPPERCTW=NULL;
unsigned CharUpperCTW_compressed[]={
0x00020000,/* Original length in bytes */
0x0000092c,/* Compressed length in bytes */
0x00000002,0x9c200000,0x21000000,0x00420041,0x00440043,0x00460045,0x00480047,0x004a0049,0x004c004b,0x004e004d,0x0050004f,0x00520051,0x00540053,0x00560055,0x00580057,0x205a0059,
0x2c03bc9c,0x1b0002f0,0x00c100c0,0x00c300c2,0x00c500c4,0x00c700c6,0x00c900c8,0x00cb00ca,0x00cd00cc,0x00cf00ce,0x00d100d0,0x00d300d2,0x00d500d4,0x000748d6,0xd900d80d,0xdb00da00,
0xdd00dc00,0x7800de00,0x00000001,0x02000001,0x04000001,0x06000001,0x5d08015d,0x015d0a01,0x0e015d0c,0x5d10015d,0x015d1201,0x16015d14,0x5d18015d,0x015d1a01,0x1e015d1c,0x5d20015d,
0x015d2201,0x26015d24,0x5d28015d,0x015d2a01,0x2e015d2c,0x0002015c,0x32000000,0x5d34015d,0x019c3601,0x0001390e,0x00013b00,0x00013d00,0x00013f00,0x015d4100,0x45015d43,0x8547015d,
0x055d4a04,0x4e055d4c,0x5d500155,0x015d5209,0x56015d54,0x5d58015d,0x015d5a01,0x5e015d5c,0x5d60015d,0x015d6201,0x66015d64,0x5d68015d,0x015d6a01,0x6e015d6c,0x5d70015d,0x015d7201,
0x76015d74,0x0000015f,0x7b0d5d79,0x947d0d5d,0x82137d01,0x9584035d,0x00978701,0xdc8b0000,0x91037500,0x00002f29,0x372b9800,0xa0000000,0x5da20b5d,0x029da407,0x750094a7,0x0185ac06,
0x000097af,0x0d5db300,0xb8018db5,0x00000097,0x6c00dcbc,0xc400ad05,0x95c70285,0x055dca00,0xcf215dcd,0x5dd1235d,0x015dd315,0xd7015dd5,0x5fd9015d,0x8e01db01,0x4dde195d,0x0f5de005,
0xe40f5de2,0x5de6015d,0x015de801,0xec015dea,0x5cee015d,0xf10b6d01,0xccf4015d,0xfa017d01,0x5dfc015d,0x026cfe03,0x0000020d,0x00000202,0x00000204,0x00000206,0x0a015d08,0x5d0c015d,
0x015d0e01,0x12015d10,0x5d14015d,0x015c1601,0x4f20077c,0x0181000f,0x891e5f86,0x20458a01,0x90164d8f,0x10ad004c,0x94018593,0x02670094,0x27960197,0x0000002f,0x9d018d9c,0x949f0095,
0x30046c00,0x27a9000d,0x5fae006d,0xb201b10c,0x6d003c27,0x342bb705,0x20026400,0x0c030000,0x86340000,0x89038803,0x00038a03,0x92039100,0x94039303,0x96039503,0x98039703,0x9a039903,
0x9c039b03,0x9e039d03,0xa0039f03,0xa303a103,0xa403a303,0xa603a503,0xa803a703,0xaa03a903,0x8c03ab03,0x8f038e03,0x9c072003,0x03e20609,0x03e40000,0x44e60000,0x03e80206,0x5dea0000,
0x015dec01,0x20015cee,0x20010c07,0x00009c35,0x11041059,0x13041204,0x15041404,0x17041604,0x19041804,0x1b041a04,0x1d041c04,0x1f041e04,0x21042004,0x23042204,0x25042404,0x27042604,
0x29042804,0x2b042a04,0x2d042c04,0x2f042e04,0x01000004,0x03040204,0x05040404,0x07040604,0x09040804,0x0b040a04,0x00040c04,0x0f040e00,0x60000004,0x62000004,0x64000004,0x5d660245,
0x015d6801,0x6c015d6a,0x5d6e015d,0x015d7001,0x74015d72,0x5d76015d,0x015d7801,0x7c015d7a,0x5d7e015d,0x004d8001,0x00013900,0x92055d90,0x5d94055d,0x054d9605,0x9a015d98,0x5d9c015d,
0x015d9e01,0xa2015da0,0x5da4015d,0x015da601,0xaa015da8,0x5dac015d,0x015dae01,0xb2015db0,0x5db4015d,0x015db601,0xba015db8,0x5dbc015d,0x015cbe01,0xc1000004,0xc3000004,0x00000187,
0xcb00ddc7,0x000000df,0xd2055dd0,0x5dd4055d,0x0255d605,0xda015dd8,0x5ddc015d,0x015dde01,0xe2015de0,0x5de4015d,0x015de601,0xea015de8,0x1a69005c,0xf0005dee,0x5df2015d,0x014cf403,
0xdcf8026d,0x20016c00,0x00000ca3,0x3205313a,0x34053305,0x36053505,0x38053705,0x3a053905,0x3c053b05,0x3e053d05,0x40053f05,0x42054105,0x44054305,0x46054505,0x48054705,0x4a054905,
0x4c054b05,0x4e054d05,0x50054f05,0x52055105,0x54055305,0x56055505,0x3ca32005,0x00002004,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
0x00000000,0x00000000,0x00000000,0x0c400000,0x001e0d03,0x001e0200,0x001e0400,0x001e0600,0x015d0800,0x0c015d0a,0x5d0e015d,0x015d1001,0x14015d12,0x5d16015d,0x015d1801,0x1c015d1a,
0x5d1e015d,0x015d2001,0x24015d22,0x5d26015d,0x015d2801,0x2c015d2a,0x5d2e015d,0x015d3001,0x34015d32,0x5d36015d,0x015d3801,0x3c015d3a,0x5d3e015d,0x015d4001,0x44015d42,0x5d46015d,
0x015d4801,0x4c015d4a,0x5d4e015d,0x015d5001,0x54015d52,0x5d56015d,0x015d5801,0x5c015d5a,0x5d5e015d,0x015d6001,0x64015d62,0x5d66015d,0x015d6801,0x6c015d6a,0x5d6e015d,0x015d7001,
0x74015d72,0x5d76015d,0x015d7801,0x7c015d7a,0x5d7e015d,0x015d8001,0x84015d82,0x5d86015d,0x015d8801,0x8c015d8a,0x5d8e015d,0x015d9001,0x94015e92,0xc565341e,0xa2035da0,0x5da4035d,
0x044da605,0xaa015da8,0x5dac015d,0x015dae01,0xb2015db0,0x5db4015d,0x015db601,0xba015db8,0x5dbc015d,0x015dbe01,0xc2015dc0,0x5dc4015d,0x015dc601,0xca015dc8,0x5dcc015d,0x015dce01,
0xd2015dd0,0x5dd4015d,0x015dd601,0xda015dd8,0x5ddc015d,0x015dde01,0xe2015de0,0x5de4015d,0x015de601,0xea015de8,0x5dec015d,0x015dee01,0xf2015df0,0x5df4015d,0x015df601,0x28004cf8,
0x080d0324,0x0a1f091f,0x0c1f0b1f,0x0e1f0d1f,0x281f0f1f,0x01a40064,0x191f1808,0x1b1f1a1f,0x1d1f1c1f,0x64006c2f,0x1f280c04,0x1f2a1f29,0x1f2c1f2b,0x1f2e1f2d,0x008c2f2f,0x391f380c,
0x3b1f3a1f,0x3d1f3c1f,0x3f1f3e1f,0x08007c2f,0x1f491f48,0x1f4b1f4a,0x2f4d1f4c,0x0b7c006c,0x5900000c,0x5b00001f,0x5d00001f,0x5f00001f,0x0c008c2f,0x1f691f68,0x1f6b1f6a,0x1f6d1f6c,
0x2f6f1f6e,0x0900007c,0x1fbb1fba,0x1fc91fc8,0x1fcb1fca,0x1fdb1fda,0x1ff91ff8,0x1feb1fea,0x2ffb1ffa,0x0dbc00ac,0x00172d20,0x20b91fb8,0xd8019f1c,0xff3bd91f,0xe91fe800,0xdcec03dd,
0xfc2d2000,0x00002002,0x000134a1,0x6121600e,0x63216221,0x65216421,0x67216621,0x69216821,0x6b216a21,0x6d216c21,0x6f216e21,0x00002021,0x200b7ca1,0xc2000000,0x22000afc,0x24b724b6,
0x24b924b8,0x24bb24ba,0x24bd24bc,0x24bf24be,0x24c124c0,0x24c324c2,0x24c524c4,0x24c724c6,0x24c924c8,0x24cb24ca,0x24cd24cc,0x24cf24ce,0x00000020,0x20104cc2,0x00000000,0x00000000,
0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x7c5f0000,0x2123000f,0x23ff22ff,0x25ff24ff,0x27ff26ff,0x29ff28ff,
0x2bff2aff,0x2dff2cff,0x2fff2eff,0x31ff30ff,0x33ff32ff,0x35ff34ff,0x37ff36ff,0x39ff38ff,0x00ff3aff,0x00290020,0x00001100,0x00000000
};

HGLOBAL hCHARLOWERCTW=NULL;
wchar_t *CHARLOWERCTW=NULL;
unsigned CharLowerCTW_compressed[]={
0x00020000,/* Original length in bytes */
0x0000095c,/* Compressed length in bytes */
0x00000002,0x5c200000,0x21000000,0x00620061,0x00640063,0x00660065,0x00680067,0x006a0069,0x006c006b,0x006e006d,0x0070006f,0x00720071,0x00740073,0x00760075,0x00780077,0x207a0079,
0x2002bc5c,0x0001f02d,0xe100e01b,0xe300e200,0xe500e400,0xe700e600,0xe900e800,0xeb00ea00,0xed00ec00,0xef00ee00,0xf100f000,0xf300f200,0xf500f400,0x0f48f600,0xf900f80a,0xfb00fa00,
0xfd00fc00,0x015cfe00,0x00081f20,0x0001010e,0x00010300,0x00010500,0x00010700,0x015d0900,0x0d015d0b,0x5d0f015d,0x015d1101,0x15015d13,0x5d17015d,0x015d1901,0x1d015d1b,0x5d1f015d,
0x015d2101,0x25015d23,0x5d27015d,0x015d2901,0x2d015d2b,0x012f015e,0x5d3313b5,0x015d3501,0x06019c37,0x0000013a,0x0000013c,0x0201543e,0x00000140,0x44015d42,0x5d46015d,0x004f4801,
0x5d4b0000,0x055d4d05,0x51095d4f,0x5d53095d,0x015d5501,0x59015d57,0x5d5b015d,0x015d5d01,0x61015d5f,0x5d63015d,0x015d6501,0x69015d67,0x5d6b015d,0x015d6d01,0x71015d6f,0x5d73015d,
0x015d7501,0xff004f77,0x0d5d7a00,0x7e0d5d7c,0x00020d8c,0x83025300,0x5785035d,0x88025402,0x5602025c,0x8c025702,0xdd04038c,0x5b025901,0x014c9202,0x63026008,0x69000002,0x99026802,
0x1a740154,0x72026f06,0x75000002,0x0b5da102,0xa5075da3,0x56a8029d,0x7d028301,0x015fad03,0x5cb00288,0x028a021b,0x5db4028b,0x014fb60a,0x5cb90292,0xbd037d02,0x016c00dc,0x9dc6006d,
0x0095c901,0xce0095cc,0x4dd00055,0x1345d206,0xd6075dd4,0x5dd8015d,0x015dda01,0x00014fdc,0x1b5ddf00,0xe30e45e1,0x4de50f5d,0x015de71b,0xeb015de9,0x5ded015d,0x0495ef01,0xf50095f3,
0x0d670094,0x5dfb0000,0x035dfd03,0x02055cff,0x00000201,0x02194403,0x00000205,0x091c4d07,0x5d0b015d,0x015d0d01,0x11015d0f,0x5d13015d,0x015d1501,0xac1b8417,0x00002008,0x0a0014b5,
0x000003ac,0x03ae03ad,0x000003af,0x00014ccc,0xce03cd2a,0xb1000003,0xb303b203,0xb503b403,0xb703b603,0xb903b803,0xbb03ba03,0xbd03bc03,0xbf03be03,0xc103c003,0xc3000003,0xc503c403,
0xc703c603,0xc903c803,0xcb03ca03,0x7d4b2003,0x154ce30c,0x0003e502,0x1555e700,0xeb1155e9,0x5ded015d,0x0420ef01,0x4c000214,0x04520451,0x04540453,0x04560455,0x04580457,0x045a0459,
0x045c045b,0x045e0000,0x0430045f,0x04320431,0x04340433,0x04360435,0x04380437,0x043a0439,0x043c043b,0x043e043d,0x0440043f,0x04420441,0x04440443,0x04460445,0x04480447,0x044a0449,
0x044c044b,0x044e044d,0x3f20044f,0x610e041c,0x63000004,0x65000004,0x67000004,0x69000004,0x5d6b015d,0x015d6d01,0x71015d6f,0x5d73015d,0x015d7501,0x79015d77,0x5d7b015d,0x015d7d01,
0x81015d7f,0x9102853d,0x5d93055d,0x055d9505,0x99055d97,0x5d9b015d,0x015d9d01,0xa1015d9f,0x5da3015d,0x015da501,0xa9015da7,0x5dab015d,0x015dad01,0xb1015daf,0x5db3015d,0x015db501,
0xb9015db7,0x5dbb015d,0x015dbd01,0x020f8cbf,0x000004c2,0x000187c4,0x00ddc800,0x0000dfcc,0x055dd100,0xd5055dd3,0x5dd7055d,0x015dd907,0xdd015ddb,0x5ddf015d,0x015de101,0xe5015de3,
0x5de7015d,0x015de901,0xef07d5eb,0x5df1015d,0x035df301,0xf902cdf5,0x3f2000dc,0x7c28065c,0x613a0001,0x63056205,0x65056405,0x67056605,0x69056805,0x6b056a05,0x6d056c05,0x6f056e05,
0x71057005,0x73057205,0x75057405,0x77057605,0x79057805,0x7b057a05,0x7d057c05,0x7f057e05,0x81058005,0x83058205,0x85058405,0x28058605,0x00200154,0x00000000,0x00000000,0x00000000,
0x00000000,0x00000000,0x00247d00,0x10d03a00,0x10d210d1,0x10d410d3,0x10d610d5,0x10d810d7,0x10da10d9,0x10dc10db,0x10de10dd,0x10e010df,0x10e210e1,0x10e410e3,0x10e610e5,0x10e810e7,
0x10ea10e9,0x10ec10eb,0x10ee10ed,0x10f010ef,0x10f210f1,0x10f410f3,0x002010f5,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x5b4c7d00,0x00000020,0x0e5a1cce,0x00001e01,
0x00001e03,0x00001e05,0x00001e07,0x0b015d09,0x5d0d015d,0x015d0f01,0x13015d11,0x5d15015d,0x015d1701,0x1b015d19,0x5d1d015d,0x015d1f01,0x23015d21,0x5d25015d,0x015d2701,0x2b015d29,
0x5d2d015d,0x015d2f01,0x33015d31,0x5d35015d,0x015d3701,0x3b015d39,0x5d3d015d,0x015d3f01,0x43015d41,0x5d45015d,0x015d4701,0x4b015d49,0x5d4d015d,0x015d4f01,0x53015d51,0x5d55015d,
0x015d5701,0x5b015d59,0x5d5d015d,0x015d5f01,0x63015d61,0x5d65015d,0x015d6701,0x6b015d69,0x5d6d015d,0x015d6f01,0x73015d71,0x5d75015d,0x015d7701,0x7b015d79,0x5d7d015d,0x015d7f01,
0x83015d81,0x5d85015d,0x015d8701,0x8b015d89,0x5d8d015d,0x015d8f01,0x93015d91,0x1e95015e,0xa1145534,0x5da3035d,0x055da503,0xa9055da7,0x5dab015d,0x015dad01,0xb1015daf,0x5db3015d,
0x015db501,0xb9015db7,0x5dbb015d,0x015dbd01,0xc1015dbf,0x5dc3015d,0x015dc501,0xc9015dc7,0x5dcb015d,0x015dcd01,0xd1015dcf,0x5dd3015d,0x015dd501,0xd9015dd7,0x5ddb015d,0x015ddd01,
0xe1015ddf,0x5de3015d,0x015de501,0xe9015de7,0x5deb015d,0x015ded01,0xf1015def,0x5df3015d,0x015df501,0xf9015df7,0x27031c35,0x1f0c0374,0x1f021f01,0x1f041f03,0x1f061f05,0x5c271f07,
0x0801c000,0x1f111f10,0x1f131f12,0x2f151f14,0x0468006c,0x211f200c,0x231f221f,0x251f241f,0x271f261f,0x0c008c2f,0x1f311f30,0x1f331f32,0x1f351f34,0x2f371f36,0x4009007c,0x421f411f,
0x441f431f,0x7c1f451f,0x000c3009,0x001f510a,0x001f5300,0x001f5500,0x8c2f5700,0x1f600c00,0x1f621f61,0x1f641f63,0x1f661f65,0x007c2f67,0x20013c30,0x0400444d,0x1fb11fb0,0x37711f70,
0x7204025c,0x741f731f,0x7c37751f,0x1fd00400,0x1f761fd1,0x007c3777,0xe11fe006,0x7b1f7a1f,0x8435e51f,0x1f780400,0x1f7c1f79,0x0074357d,0x042c4d20,0x25000020,0x0e0001b4,0x21712170,
0x21732172,0x21752174,0x21772176,0x21792178,0x217b217a,0x217d217c,0x217f217e,0x25000020,0x0020098c,0x2b000000,0x2200090c,0x24d124d0,0x24d324d2,0x24d524d4,0x24d724d6,0x24d924d8,
0x24db24da,0x24dd24dc,0x24df24de,0x24e124e0,0x24e324e2,0x24e524e4,0x24e724e6,0x24e924e8,0x00000020,0x11ec2b00,0x00000020,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x1cea0000,0x41230011,0x43ff42ff,0x45ff44ff,0x47ff46ff,0x49ff48ff,0x4bff4aff,0x4dff4cff,0x4fff4eff,0x51ff50ff,
0x53ff52ff,0x55ff54ff,0x57ff56ff,0x59ff58ff,0x00ff5aff,0x00690020,0x00001100,0x00000000
};

EXTERNC void CapsTablesWStop(int fr) { /* fr=1, unlock & free; fr=0 unlock only */
#define UNLOCKFREE(targ)\
  if (targ)          {GlobalUnlock(targ);  targ=NULL;}\
  if (fr && h##targ) {GlobalFree(h##targ); h##targ=NULL;}
  UNLOCKFREE(ISCHARUPPERCTW);
  UNLOCKFREE(ISCHARLOWERCTW);
  UNLOCKFREE(ISCHARALPHANUMERICCTW);
  UNLOCKFREE(CHARUPPERCTW);
  UNLOCKFREE(CHARLOWERCTW);
#undef UNLOCKFREE
  //MessageBox(0,fr?"CapsTables: Freed":"CapsTables: Unlocked","???",MB_OK);
}

// to initialize, sizeofTCHAR==sizeof(wchar_t). Any other size will return success without allocating and decompressing
// If running WindowsNT, returns success without allocating and decompressing
EXTERNC int CapsTablesWStart(unsigned sizeofTCHAR) { /* returns 0 on failure */
  do {
    if (sizeofTCHAR!=sizeof(wchar_t) || (g_fOnNT && !BLOCKNT)) return 1;
    lzo_uint new_len;
    if (lzo_init() != LZO_E_OK) break;

#define UNCOMPR(targ,src,typ) \
    if (!h##targ && (!(h##targ=GlobalAlloc(GMEM_MOVEABLE,new_len=src[0])) ||\
        !(targ=(typ *)GlobalLock(h##targ)) ||\
        LZO_E_OK != lzo1x_decompress((const unsigned char *)(&src[2]),src[1],(unsigned char *)(targ),&new_len,NULL) ||\
        new_len!=src[0]) ) break;\
    if (!targ && !(targ=(typ *)GlobalLock(h##targ))) break;
    unsigned i;
    UNCOMPR(ISCHARUPPERCTW,IsCharUpperCTW_compressed,unsigned);
    UNCOMPR(ISCHARLOWERCTW,IsCharLowerCTW_compressed,unsigned);
    UNCOMPR(ISCHARALPHANUMERICCTW,IsCharAlphaNumericCTW_compressed,unsigned);
    UNCOMPR(CHARUPPERCTW,CharUpperCTW_compressed,wchar_t);
    for(i=0; i<CharUpperCTW_compressed[0]/sizeof(*CHARUPPERCTW); i++) if (!CHARUPPERCTW[i]) CHARUPPERCTW[i]=i;
    UNCOMPR(CHARLOWERCTW,CharLowerCTW_compressed,wchar_t);
    for(i=0; i<CharLowerCTW_compressed[0]/sizeof(*CHARLOWERCTW); i++) if (!CHARLOWERCTW[i]) CHARLOWERCTW[i]=i;
#undef UNCOMPR
    //char debug[256]; snprintf(debug,sizeof(debug),"%p %p",ISCHARUPPERCTW,ISCHARLOWERCTW); MessageBox(0,debug,"???",MB_OK);
    //if (BLOCKNT) MessageBox(0,"CapsTables: Using Windows 9x functions","???",MB_OK);
    //char debug[256]; snprintf(debug,sizeof(debug),"A:%c b:%c C:%c",CHARLOWERCT(L'A'),CHARLOWERCT(L'b'),CHARLOWERCT(L'C')); MessageBox(0,debug,"???",MB_OK);
    return 1;
  } while(0);
  CapsTablesWStop(1);
  return 0;
}

#ifndef IsCharUpperXW /* Do not make functions if already defined as macros */
EXTERNC BOOL IsCharUpperXW(wchar_t wc) {
  //if (!ISCHARUPPERCTW && !CapsTablesWStart(sizeof(wc))) return(FALSE);
  return (!BLOCKNT && g_fOnNT)?IsCharUpperW(wc):INTPACKEDBOOLEAN(wc,ISCHARUPPERCTW,unsigned);
}
#endif

#ifndef IsCharLowerXW
EXTERNC BOOL IsCharLowerXW(wchar_t wc) {
  //if (!ISCHARLOWERCTW && !CapsTablesWStart(sizeof(wc))) return(FALSE);
  return (!BLOCKNT && g_fOnNT)?IsCharLowerW(wc):INTPACKEDBOOLEAN(wc,ISCHARLOWERCTW,unsigned);
}
#endif

#ifndef IsCharAlphaNumericXW
EXTERNC BOOL IsCharAlphaNumericXW(wchar_t wc) {
  //if (!ISCHARALPHANUMERICCTW && !CapsTablesWStart(sizeof(wc))) return(FALSE);
  return (!BLOCKNT && g_fOnNT)?IsCharAlphaNumericW(wc):INTPACKEDBOOLEAN(wc,ISCHARALPHANUMERICCTW,unsigned);
}
#endif

#ifndef CharUpperXW
EXTERNC wchar_t CharUpperXW(wchar_t wc) {
  //if (!CHARUPPERCTW && !CapsTablesWStart(sizeof(wc))) return(wc);
  return (!BLOCKNT && g_fOnNT)?((wchar_t)(unsigned)CharUpperW((wchar_t *)(unsigned)wc)):CHARUPPERCTW[wc];
}
#endif

#ifndef CharLowerXW
EXTERNC wchar_t CharLowerXW(wchar_t wc) {
  //if (!CHARLOWERCTW && !CapsTablesWStart(sizeof(wc))) return(wc);
  return (!BLOCKNT && g_fOnNT)?((wchar_t)(unsigned)CharLowerW((wchar_t *)(unsigned)wc)):CHARLOWERCTW[wc];
}
#endif
